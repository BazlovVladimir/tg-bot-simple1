import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from typing import List
import telebot
from telebot import types
import time
import requests
import sqlite3
from db import init_db
from openrouter_client import OpenRouterClient, OpenRouterError

load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f"logs/bot_{datetime.now().strftime('%Y-%m-%d')}.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

bot = telebot.TeleBot(TOKEN)
BOT_INFO = {"version": "1", "author": "–ë–∞–∑–ª–æ–≤ –í–ª–∞–¥–∏–º–∏—Ä –ê–Ω–¥—Ä–µ–µ–≤–∏—á", "purpose": "–û–±—É—á–µ–Ω–∏–µ"}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
ACTIVE_MODEL = None
MODELS_DATA = [
    {"id": 1, "label": "GPT-3.5 Turbo", "key": "openai/gpt-3.5-turbo", "active": True},
    {"id": 2, "label": "GPT-4", "key": "openai/gpt-4", "active": False},
    {"id": 3, "label": "GPT-4 Turbo", "key": "openai/gpt-4-turbo", "active": False},
    {"id": 4, "label": "Claude-3 Opus", "key": "anthropic/claude-3-opus", "active": False},
    {"id": 5, "label": "Claude-3 Sonnet", "key": "anthropic/claude-3-sonnet", "active": False},
    {"id": 6, "label": "Claude-3 Haiku", "key": "anthropic/claude-3-haiku", "active": False},
    {"id": 7, "label": "Gemini Pro", "key": "google/gemini-pro", "active": False},
    {"id": 8, "label": "Llama 2 70B", "key": "meta-llama/llama-2-70b-chat", "active": False},
    {"id": 9, "label": "Mistral 7B", "key": "mistralai/mistral-7b-instruct", "active": False},
    {"id": 10, "label": "Mixtral 8x7B", "key": "mistralai/mixtral-8x7b-instruct", "active": False},
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
try:
    openrouter_client = OpenRouterClient()
    logging.info("OpenRouter –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except RuntimeError as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenRouter –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    openrouter_client = None


def _setup_bot_commands() -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞ Telegram (—É–¥–æ–±–Ω–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤)."""
    cmds = [
        types.BotCommand(command="start", description="üöÄ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø—Ä–∞–≤–∫–∞"),
        types.BotCommand(command="note_add", description="üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É"),
        types.BotCommand(command="note_list", description="üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–º–µ—Ç–∫–∏"),
        types.BotCommand(command="note_find", description="üîç –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É"),
        types.BotCommand(command="note_edit", description="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É"),
        types.BotCommand(command="note_del", description="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        types.BotCommand(command="note_count", description="üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫"),
        types.BotCommand(command="note_export", description="üíæ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª"),
        types.BotCommand(command="note_stats", description="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫"),
        types.BotCommand(command="model", description="ü§ñ –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å"),
        types.BotCommand(command="models", description="üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"),
        types.BotCommand(command="ask", description="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-–º–æ–¥–µ–ª–∏"),
        types.BotCommand(command="sum", description="‚ûï –í—ã—á–∏—Å–ª–∏—Ç—å —Å—É–º–º—É —á–∏—Å–µ–ª"),
        types.BotCommand(command="max", description="üìà –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"),
        types.BotCommand(command="weather", description="üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ"),
        types.BotCommand(command="about", description="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        types.BotCommand(command="ping", description="‚ö° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞"),
        types.BotCommand(command="hide", description="‚å®Ô∏è –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"),
    ]
    bot.set_my_commands(cmds)


def _build_messages(user_id: int, user_text: str) -> List[dict]:
    """–°—Ç—Ä–æ–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏"""
    system = (
        f"–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Å—É—â–µ—Å—Ç–≤—É.\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "1) –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–∞–≤–∞–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º.\n"
    )

    return [
        {"role": "system", "content": system},
        {"role": "user", "content": user_text},
    ]


def chat_once(messages: List[dict], model: str, temperature: float = 0.2, max_tokens: int = 400) -> tuple:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    if openrouter_client is None:
        raise OpenRouterError(500, "OpenRouter –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENROUTER_API_KEY.")

    return openrouter_client.chat_once(
        messages=messages,
        model=model,
        temperature=temperature,
        max_tokens=max_tokens
    )


def list_models():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π"""
    return MODELS_DATA


def get_active_model():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å"""
    global ACTIVE_MODEL
    if ACTIVE_MODEL is None:
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
        for model in MODELS_DATA:
            if model['active']:
                ACTIVE_MODEL = model
                break
    return ACTIVE_MODEL


def set_active_model(model_id: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ ID"""
    global ACTIVE_MODEL, MODELS_DATA

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    for model in MODELS_DATA:
        model['active'] = False

    # –ù–∞—Ö–æ–¥–∏–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å
    for model in MODELS_DATA:
        if model['id'] == model_id:
            model['active'] = True
            ACTIVE_MODEL = model
            return model

    raise ValueError("–ú–æ–¥–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


def fetch_weather_moscow_open_meteo() -> str:
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude": 55.7558,
        "longitude": 37.6173,
        "current": "temperature_2m",
        "timezone": "Europe/Moscow"
    }
    try:
        r = requests.get(url, params=params, timeout=5)
        r.raise_for_status()
        t = r.json()["current"]["temperature_2m"]
        return f"–ú–æ—Å–∫–≤–∞: —Å–µ–π—á–∞—Å {round(t)}¬∞C"
    except Exception:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É."


def parse_ints_from_text(text: str) -> List[int]:
    """–í—ã–¥–µ–ª—è–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–∞–ø—è—Ç—ã–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω—ã-–∫–æ–º–∞–Ω–¥—ã."""
    text = text.replace(",", " ")
    tokens = [tok for tok in text.split() if not tok.startswith("/")]
    return [int(tok) for tok in tokens if is_int_token(tok)]


def is_int_token(t: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–Ω–∞–∫–∞ –º–∏–Ω—É—Å)."""
    if not t:
        return False
    t = t.strip()
    if t in {"-", ""}:
        return False
    return t.lstrip("-").isdigit()


def log_message(message, command=None):
    user = message.from_user
    user_info = f"ID: {user.id}, –ò–º—è: {user.first_name or ''} {user.last_name or ''}"
    if user.username: user_info += f" (@{user.username})"
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}, –ö–æ–º–∞–Ω–¥–∞: {command or '—Ç–µ–∫—Å—Ç'}, –¢–µ–∫—Å—Ç: '{message.text}'")


def save_note(user_id: int, text: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('notes.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO notes (user_id, text) VALUES (?, ?)', (user_id, text))
    conn.commit()
    conn.close()


def get_user_notes(user_id: int) -> List[tuple]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('notes.db')
    cursor = conn.cursor()
    cursor.execute('SELECT text, created_at FROM notes WHERE user_id = ? ORDER BY created_at DESC', (user_id,))
    notes = cursor.fetchall()
    conn.close()
    return notes


def make_main_kb():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("about", "sum", "show")
    kb.row("–û –±–æ—Ç–µ", "–°—É–º–º–∞")
    kb.row("–ü–æ–≥–æ–¥–∞", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    kb.row("/help", "hide")
    return kb


@bot.message_handler(commands=["start", "help"])
def cmd_start(message: types.Message) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã."""
    log_message(message, "/start" if message.text.startswith("/start") else "/help")

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —É–º–Ω—ã–π –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∑–∞–º–µ—Ç–æ–∫ –∏ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.\n\n"
        "üìù **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–º–µ—Ç–æ–∫:**\n"
        " /note_add <—Ç–µ–∫—Å—Ç> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É\n"
        " /note_list [N] - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–º–µ—Ç–æ–∫ (–∏–ª–∏ –≤—Å–µ)\n"
        " /note_find <–ø–æ–¥—Å—Ç—Ä–æ–∫–∞> - –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É\n"
        " /note_edit <id> <—Ç–µ–∫—Å—Ç> - –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É\n"
        " /note_del <id> - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ ID\n"
        " /note_count - –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫\n"
        " /note_export - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–∞–π–ª\n"
        " /note_stats [days] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n"
        "ü§ñ **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è AI-–º–æ–¥–µ–ª–µ–π:**\n"
        " /models - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n"
        " /model <id> - –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ ID\n"
        " /ask <–≤–æ–ø—Ä–æ—Å> - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏\n\n"
        "üîß **–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        " /sum <—á–∏—Å–ª–∞> - –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—É–º–º—É —á–∏—Å–µ–ª\n"
        " /max <—á–∏—Å–ª–∞> - –Ω–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n"
        " /weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ\n"
        " /about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        " /ping - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞\n"
        " /hide - —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n"
    )

    if message.text.startswith("/start"):
        bot.reply_to(message, text, reply_markup=make_main_kb(), parse_mode='Markdown')
    else:
        bot.reply_to(message, text, parse_mode='Markdown')

@bot.message_handler(commands=["ask"])
def cmd_ask(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø—Ä–æ—Å–∞ –º–æ–¥–µ–ª–∏"""
    log_message(message, "/ask")

    if openrouter_client is None:
        bot.reply_to(message, "‚ùå OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞.")
        return

    q = message.text.replace('/ask', '', 1).strip()
    if not q:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ask <–≤–æ–ø—Ä–æ—Å>")
        return

    msg = _build_messages(message.from_user.id, q[:600])
    active_model = get_active_model()
    if not active_model:
        bot.reply_to(message, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ /models")
        return

    model_key = active_model['key']

    try:
        text, ms = chat_once(msg, model=model_key, temperature=0.2, max_tokens=400)
        out = (text or '').strip()[:4000]  # –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
        bot.reply_to(message, f"{out}\n\n({ms} –º—Å; –º–æ–¥–µ–ª—å: {model_key})")
    except OpenRouterError as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /ask: {e}")
        bot.reply_to(message, "‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")


@bot.message_handler(commands=["models"])
def cmd_models(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π"""
    log_message(message, "/models")
    items = list_models()
    if not items:
        bot.reply_to(message, '–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç.')
        return
    lines = ['üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:']
    for m in items:
        star = '‚úÖ' if m['active'] else '  '
        lines.append(f"{star} {m['id']}. {m['label']} ({m['key']})")
    lines.append("\nüîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å: /model <ID>")
    bot.reply_to(message, "\n".join(lines))


@bot.message_handler(commands=["model"])
def cmd_model(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    log_message(message, "/model")
    arg = message.text.replace('/model', '', 1).strip()

    if not arg:
        # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
        active = get_active_model()
        if active:
            bot.reply_to(message,
                         f"‚úÖ –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {active['label']} ({active['key']})\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /model <ID> –∏–ª–∏ /models")
        else:
            bot.reply_to(message, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏.\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /model <ID> –∏–ª–∏ /models")
        return

    if not arg.isdigit():
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /model <ID –∏–∑ /models>")
        return

    try:
        model_id = int(arg)
        active = set_active_model(model_id)
        bot.reply_to(message, f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞: {active['label']} ({active['key']})")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å: {active['label']}")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID –º–æ–¥–µ–ª–∏. –°–Ω–∞—á–∞–ª–∞ /models.")


@bot.message_handler(commands=["sum"])
def cmd_sum(message):
    nums = parse_ints_from_text(message.text)
    logging.info("Sum cmd from id=%s text=%r -> %r", message.from_user.id if message.from_user else "?", message.text,
                 nums)
    if not nums:
        bot.reply_to(message, "–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: /sum 2 3 10 –∏–ª–∏ /sum 2, 3, -5")
        return
    bot.reply_to(message, f"–°—É–º–º–∞: {sum(nums)}")


@bot.message_handler(commands=["max"])
def cmd_max(message):
    log_message(message, "/max")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º—É–º–∞:")
    bot.register_next_step_handler(message, on_max_numbers)


def on_max_numbers(message):
    nums = parse_ints_from_text(message.text)
    logging.info("Max next step from id=%s text=%r -> %r", message.from_user.id if message.from_user else "?",
                 message.text, nums)
    if not nums:
        bot.reply_to(message, "–ù–µ –≤–∏–∂—É —á–∏—Å–µ–ª. –ü—Ä–∏–º–µ—Ä: 2 3 10")
    else:
        bot.reply_to(message, f"–ú–∞–∫—Å–∏–º—É–º: {max(nums)}")


@bot.message_handler(commands=["about"])
def about(message):
    log_message(message, "/about")
    bot.reply_to(message,
                 f"–í–µ—Ä—Å–∏—è: {BOT_INFO['version']}\n–ê–≤—Ç–æ—Ä: {BOT_INFO['author']}\n–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {BOT_INFO['purpose']}")


@bot.message_handler(commands=["ping"])
def ping(message):
    log_message(message, "/ping")
    start = time.time()
    msg = bot.reply_to(message, "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞")
    bot.edit_message_text(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {round((time.time() - start) * 1000, 2)} –º—Å", msg.chat.id, msg.message_id)


@bot.message_handler(commands=['hide'])
def hide_kb(message):
    log_message(message, "/hide")
    rm = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–°–ø—Ä—è—Ç–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.", reply_markup=rm)


@bot.message_handler(commands=['confirm'])
def confirm_cmd(message):
    log_message(message, "/confirm")
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–î–∞", callback_data="confirm:yes"),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="confirm:no"),
    )
    bot.send_message(message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ?", reply_markup=kb)


@bot.message_handler(commands=['weather'])
def weather_cmd(message):
    log_message(message, "/weather")
    weather_info = fetch_weather_moscow_open_meteo()
    bot.reply_to(message, weather_info)


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
@bot.message_handler(commands=['note_add'])
def note_add_cmd(message):
    log_message(message, "/note_add")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    bot.register_next_step_handler(message, save_note_handler)


def save_note_handler(message):
    user_id = message.from_user.id
    text = message.text
    save_note(user_id, text)
    bot.reply_to(message, "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∑–∞–º–µ—Ç–∫—É: {text}")


@bot.message_handler(commands=['note_list'])
def note_list_cmd(message):
    log_message(message, "/note_list")
    user_id = message.from_user.id
    notes = get_user_notes(user_id)

    if not notes:
        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    response = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
    for i, (text, created_at) in enumerate(notes, 1):
        response += f"{i}. {text}\n   üìÖ {created_at}\n\n"

    bot.reply_to(message, response)


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∑–∞–º–µ—Ç–æ–∫
@bot.message_handler(commands=['note_find'])
def note_find_cmd(message):
    log_message(message, "/note_find")
    bot.reply_to(message, "–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º.")


@bot.message_handler(commands=['note_edit'])
def note_edit_cmd(message):
    log_message(message, "/note_edit")
    bot.reply_to(message, "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º.")


@bot.message_handler(commands=['note_del'])
def note_del_cmd(message):
    log_message(message, "/note_del")
    bot.reply_to(message, "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º.")


@bot.message_handler(commands=['note_count'])
def note_count_cmd(message):
    log_message(message, "/note_count")
    user_id = message.from_user.id
    notes = get_user_notes(user_id)
    bot.reply_to(message, f"–£ –≤–∞—Å {len(notes)} –∑–∞–º–µ—Ç–æ–∫.")


@bot.message_handler(commands=['note_export'])
def note_export_cmd(message):
    log_message(message, "/note_export")
    bot.reply_to(message, "–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–º–µ—Ç–æ–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º.")


@bot.message_handler(commands=['note_stats'])
def note_stats_cmd(message):
    log_message(message, "/note_stats")
    bot.reply_to(message, "–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–º–µ—Ç–æ–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±—É–¥—É—â–µ–º.")


@bot.callback_query_handler(func=lambda c: c.data.startswith("confirm:"))
def on_confirm(c):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    choice = c.data.split(":", 1)[1]  # "yes" –∏–ª–∏ "no"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "—Ç–∏–∫" –Ω–∞ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    bot.answer_callback_query(c.id, "–ü—Ä–∏–Ω—è—Ç–æ")

    # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    bot.send_message(c.message.chat.id, "–ì–æ—Ç–æ–≤–æ!" if choice == "yes" else "–û—Ç–º–µ–Ω–µ–Ω–æ.")

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c.from_user.id} –≤—ã–±—Ä–∞–ª: {choice}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda m: m.text == "–°—É–º–º–∞")
def kb_sum(message):
    log_message(message, "–ö–Ω–æ–ø–∫–∞ –°—É–º–º–∞")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é:")
    bot.register_next_step_handler(message, on_sum_numbers)


@bot.message_handler(func=lambda m: m.text == "–ü–æ–≥–æ–¥–∞")
def kb_weather(message):
    log_message(message, "–ö–Ω–æ–ø–∫–∞ –ü–æ–≥–æ–¥–∞")
    weather_info = fetch_weather_moscow_open_meteo()
    bot.reply_to(message, weather_info)


@bot.message_handler(func=lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
def kb_add_note(message):
    log_message(message, "–ö–Ω–æ–ø–∫–∞ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    note_add_cmd(message)


@bot.message_handler(func=lambda m: m.text == "show")
def show_button(message):
    log_message(message, "–ö–Ω–æ–ø–∫–∞ show")
    note_list_cmd(message)


def on_sum_numbers(message):
    nums = parse_ints_from_text(message.text)
    logging.info("KB-sum next step from id=%s text=%r -> %r", message.from_user.id if message.from_user else "?",
                 message.text, nums)
    if not nums:
        bot.reply_to(message, "–ù–µ –≤–∏–∂—É —á–∏—Å–µ–ª. –ü—Ä–∏–º–µ—Ä: 2 3 10")
    else:
        bot.reply_to(message, f"–°—É–º–º–∞: {sum(nums)}")


@bot.message_handler(func=lambda m: m.text == "–û –±–æ—Ç–µ")
def about_button(message):
    log_message(message, "–ö–Ω–æ–ø–∫–∞ –û –±–æ—Ç–µ")
    about(message)


@bot.message_handler(func=lambda m: m.text == "about")
def about_button_en(message):
    log_message(message, "–ö–Ω–æ–ø–∫–∞ about")
    about(message)


@bot.message_handler(func=lambda m: m.text == "sum")
def sum_button_en(message):
    log_message(message, "–ö–Ω–æ–ø–∫–∞ sum")
    kb_sum(message)


@bot.message_handler(func=lambda m: m.text == "hide")
def hide_button(message):
    log_message(message, "–ö–Ω–æ–ø–∫–∞ hide")
    hide_kb(message)


@bot.message_handler(func=lambda m: True)
def handle_all(message):
    log_message(message)
    bot.reply_to(message, "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    _setup_bot_commands()

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    logging.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(MODELS_DATA)}")
    active_model = get_active_model()
    if active_model:
        logging.info(f"–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {active_model['label']} ({active_model['key']})")

    bot.infinity_polling()